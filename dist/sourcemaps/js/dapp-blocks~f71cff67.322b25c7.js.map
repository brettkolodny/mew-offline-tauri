{"version":3,"sources":["webpack:///./src/assets/images/icons/dapps/icon-dapp-ethblocks.svg","webpack:///./src/dapps/eth-blocks/TheEthBlocksLayout.vue?4739","webpack:///src/dapps/eth-blocks/TheEthBlocksLayout.vue","webpack:///./src/dapps/eth-blocks/TheEthBlocksLayout.vue?2432","webpack:///./src/dapps/eth-blocks/TheEthBlocksLayout.vue"],"names":["module","exports","render","_vm","this","_h","$createElement","_c","_self","attrs","headerImg","header","tabs","activeTab","validNetworks","staticRenderFns","name","components","TheWrapperDapp","data","title","subtext","checkPendingInterval","computed","mapState","mapGetters","hasPendingTxs","identifyNetwork","route","id","hasBadge","badgeContent","watch","$route","mounted","beforeDestroy","clearInterval","methods","mapActions","setCheckPendingInterval","filter","forEach","checkTx","hash","component"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,wC,2CCA3C,IAAIC,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,mBAAmB,CAACE,MAAM,CAAC,iBAAgB,EAAK,WAAWN,EAAIO,UAAU,cAAcP,EAAIQ,OAAO,YAAYR,EAAIS,KAAK,aAAaT,EAAIU,UAAU,iBAAiBV,EAAIW,cAAc,YAAY,OAChSC,EAAkB,G,8GCsBP,GACfC,0BACAC,YACAC,0BAAA,yDAEAC,gBACA,OACAR,QACAS,mBACAC,yDAEAR,YACAH,oBACAI,qBACAQ,0BAGAC,uFACAC,mCACAA,yCACAC,sDACAA,2DAMAC,yBACA,yCAEAC,2BACA,sBAEAf,gBACA,OACA,CACAI,wBACAY,OAAAZ,uBACAa,KACAC,aAEA,CACAd,iBACAY,OACAZ,4BAEAa,KACAC,aAEA,CACAd,qBACAY,OACAZ,gCAEAa,KACAC,uCACAC,aACA,wCACA,6BACA,QAKAC,OAIAN,0BACA,GACA,gCAGAO,mBACA,+BACA,+BACA,mCACA,+BAEA,iCAIAC,mBACA,oBACA,+BAEA,2CACA,gCAEA,+CACA,iCAGAC,yBACAC,0CAEAC,yCACAC,yDAIAC,mCAAA,WACAH,yCACA,kDACA,gBACA,qBACAI,oBAAA,0CACAC,qBACA,qBAGAL,wCAEA,MAQAM,oBAAA,WACA,GACA,yDACA,MACA,OACAC,QAEA,sBACA,iCACAP,8CC1J2W,I,YCOvWQ,EAAY,eACd,EACA1C,EACAa,GACA,EACA,KACA,KACA,MAIa,aAAA6B,E","file":"js/dapp-blocks~f71cff67.322b25c7.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/icon-dapp-ethblocks.571d8dde.svg\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('the-wrapper-dapp',{attrs:{\"is-new-header\":true,\"dapp-img\":_vm.headerImg,\"banner-text\":_vm.header,\"tab-items\":_vm.tabs,\"active-tab\":_vm.activeTab,\"valid-networks\":_vm.validNetworks,\"top-strip\":\"\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <!--\n    ===================================================\n    The Staked Layout\n    ===================================================\n    -->\n  <the-wrapper-dapp\n    :is-new-header=\"true\"\n    :dapp-img=\"headerImg\"\n    :banner-text=\"header\"\n    :tab-items=\"tabs\"\n    :active-tab=\"activeTab\"\n    :valid-networks=\"validNetworks\"\n    top-strip\n  >\n  </the-wrapper-dapp>\n</template>\n\n<script>\nimport { mapActions, mapGetters, mapState } from 'vuex';\nimport { ETH_BLOCKS_ROUTE } from './configsRoutes';\nimport { SUPPORTED_NETWORKS } from './handlers/helpers/supportedNetworks';\n\nexport default {\n  name: 'TheEthBlocksLayout',\n  components: {\n    TheWrapperDapp: () => import('@/core/components/TheWrapperDapp')\n  },\n  data() {\n    return {\n      header: {\n        title: 'ETH Blocks',\n        subtext: 'Mint generative art NFTs of Ethereum blocks. '\n      },\n      activeTab: 0,\n      headerImg: require('@/assets/images/icons/dapps/icon-dapp-ethblocks.svg'),\n      validNetworks: SUPPORTED_NETWORKS,\n      checkPendingInterval: false\n    };\n  },\n  computed: {\n    ...mapState('wallet', ['web3']),\n    ...mapState('ethBlocksTxs', ['cart']),\n    ...mapGetters('global', ['network', 'isTestNetwork']),\n    ...mapGetters('ethBlocksTxs', ['getAllEthBlocksTxs']),\n\n    /**\n     * Checks if there are pending txs in the dapp\n     * @returns {boolean}\n     */\n    hasPendingTxs() {\n      return this.getAllEthBlocksTxs.length > 0;\n    },\n    identifyNetwork() {\n      return this.cart.ETH;\n    },\n    tabs() {\n      return [\n        {\n          name: 'Mint a New block',\n          route: { name: ETH_BLOCKS_ROUTE.CORE.NAME },\n          id: 0,\n          hasBadge: false\n        },\n        {\n          name: 'My Blocks',\n          route: {\n            name: ETH_BLOCKS_ROUTE.MY_BLOCKS.NAME\n          },\n          id: 1,\n          hasBadge: false\n        },\n        {\n          name: `Bulk Minting `,\n          route: {\n            name: ETH_BLOCKS_ROUTE.BATCH_MINTING.NAME\n          },\n          id: 2,\n          hasBadge: this.identifyNetwork.length > 0 ? true : false,\n          badgeContent:\n            this.identifyNetwork.length > 0\n              ? `${this.identifyNetwork.length}`\n              : ''\n        }\n      ];\n    }\n  },\n  watch: {\n    /**\n     * Starts interval on new pending txs\n     */\n    hasPendingTxs(newVal) {\n      if (newVal) {\n        this.setCheckPendingInterval();\n      }\n    },\n    $route(to) {\n      if (to.name === ETH_BLOCKS_ROUTE.MY_BLOCKS.NAME) {\n        this.activeTab = this.tabs[1].id;\n      } else if (to.name === ETH_BLOCKS_ROUTE.BATCH_MINTING.NAME) {\n        this.activeTab = this.tabs[2].id;\n      } else {\n        this.activeTab = this.tabs[0].id;\n      }\n    }\n  },\n  mounted() {\n    if (this.hasPendingTxs) {\n      this.setCheckPendingInterval();\n    }\n    if (this.$route.name === ETH_BLOCKS_ROUTE.MY_BLOCKS.NAME) {\n      this.activeTab = this.tabs[1].id;\n    }\n    if (this.$route.name === ETH_BLOCKS_ROUTE.BATCH_MINTING.NAME) {\n      this.activeTab = this.tabs[2].id;\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.checkPendingInterval);\n  },\n  methods: {\n    ...mapActions('ethBlocksTxs', ['deleteEthBlockTx']),\n    /**\n     * Sets interval to start checking pending transactions\n     */\n    setCheckPendingInterval() {\n      clearInterval(this.checkPendingInterval);\n      this.checkPendingInterval = setInterval(() => {\n        if (this.hasPendingTxs) {\n          this.getAllEthBlocksTxs\n            .filter(i => i.network === this.network.type.name)\n            .forEach(i => {\n              this.checkTx(i.hash);\n            });\n        } else {\n          clearInterval(this.checkPendingInterval);\n        }\n      }, 5000);\n    },\n\n    /**\n     * Checks web3 Transaction hash.\n     * If reciept is defined, removes transaction hash from\n     * @param {string} txHash - transaction hash of the\n     */\n    checkTx(txHash) {\n      if (txHash) {\n        this.web3.eth.getTransactionReceipt(txHash).then(receipt => {\n          if (receipt) {\n            const _block = {\n              hash: txHash\n            };\n            this.deleteEthBlockTx(_block);\n            if (this.getAllEthBlocksTxs.length === 0) {\n              clearInterval(this.checkPendingInterval);\n            }\n          }\n        });\n      }\n    }\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheEthBlocksLayout.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TheEthBlocksLayout.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TheEthBlocksLayout.vue?vue&type=template&id=20907e33&\"\nimport script from \"./TheEthBlocksLayout.vue?vue&type=script&lang=js&\"\nexport * from \"./TheEthBlocksLayout.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}