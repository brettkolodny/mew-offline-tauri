{"version":3,"sources":["webpack:///./src/modules/confirmation/ModuleConfirmation.vue?90bb","webpack:///./src/modules/confirmation/ModuleConfirmation.vue?fa4b","webpack:///./src/modules/confirmation/ModuleConfirmation.vue","webpack:///./src/modules/confirmation/handlers/dataToAction.js","webpack:///./src/modules/confirmation/handlers/parseTokenData.js","webpack:///./src/assets/images/icons/hardware-wallets/Ledger-Nano-X-Label-Icon.svg","webpack:///./src/modules/confirmation/ModuleConfirmation.vue?b913","webpack:///src/modules/confirmation/ModuleConfirmation.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","showSuccessModal","showSuccessSwap","successTitle","resetSuccess","reset","network","links","successBodyText","showCrossChainModal","tx","title","rejectTransaction","sendCrossChain","on","showTxOverlay","btnAction","disableBtn","toNonEth","scopedSlots","_u","key","fn","ref","staticClass","_v","getArticle","isSwap","swapInfo","to","from","fromImg","fromType","toType","toImg","fromVal","toVal","selectedProvider","toUsdVal","fromUsdVal","txFee","gasPriceType","isHardware","txTo","txFeeUSD","value","toTxData","allToDetails","sendCurrency","_e","unsignedTxArr","length","signingPending","error","model","callback","$$v","panel","expression","_l","transaction","i","class","transactions","$event","scrollToElement","signing","_s","dataToAction","directives","name","rawName","isBatch","signedTxArray","Object","keys","signedTxObject","txVal","termRoute","proxy","footer","showSignOverlay","signature","copyToClipboard","staticRenderFns","component","signatures","data","params","Web3","eth","abi","decodeParameters","substr","utils","toBN","isZero","getSignature","parseTokensData","web3","token","store","getters","jsonInterface","constant","inputs","type","outputs","payable","stateMutability","transferFuncSig","encodeFunctionSignature","tokenData","tokenTransferTo","tokenTransferVal","tokenSymbol","BigNumber","div","pow","decimals","toFixed","toString","symbol","module","exports","components","AppScrollBlock","ConfirmationMesssage","AppModal","ConfirmationSwapTransactionDetails","ConfirmationSendTransactionDetails","ConfirmWithWallet","SuccessModal","CrossChainConfirmation","mixins","text","linkTitle","link","resolver","toDetails","ethvm","explorer","computed","mapState","mapGetters","isWeb3Wallet","isOtherWallet","isOnLedger","isNotSoftware","showConfirmWithWallet","isEmpty","ensName","nickname","selected","gasPrice","gasLimit","times","fromWei","txSigned","watch","address","handler","newVal","deep","immediate","created","EventBus","EventNames","signMessage","then","msg","sig","version","signer","catch","beforeDestroy","mounted","methods","rejected","setTimeout","duration","offset","container","parseRawData","currency","amount","sendBatchTransaction","_this","_method","_arr","promises","_tx","hexToNumberString","setEvents","promiEvent","once","locStore","nonce","timestamp","err","sendSignedTx","showSuccess","lastHash","param","signTx","event","e","signTransaction","signBatchTx","signed","batchTxEvents","objClone","_signedTx","hash","document","window","Toast","arrayParser","item"],"mappings":"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,+CACA,uBACA,QACA,0CAEAnH,iBACA,oDACAoH,qBACAnC,WACA,gCAEA7E,oBACA,yBACAwE,mDAGAvE,iBACA,kBACA,oBACA,mCACA,wBACAgH,oEACA,KACA,SAEA,WAEA5I,sBACA,yBACA,gBACA,gDAGA,gBAEA6I,oBACA,oBACA,6BACA,uDACA,2CAEAtF,mBACA,oCAEApB,0BACA,oBACA,uDAEA,2CAKAjD,wBACA,sEAKAK,2BACA,4BACA,wJACA,wKAGAuJ,OACA1G,kBAIA,SACA,sBACA,yBAMA2G,oBACA,GACA,qBAGAvF,eACAwF,oBAEA,mBACAC,cACAA,uCAEA,aACA,kDAEA,sBACA,sBAGAC,QACAC,eAGAC,mBAAA,WACA,OAOAC,mDAAA,2IAYA,GAXA,qBACAvK,mCACAA,UACAA,aACAA,mBACAA,4BACAA,YACAW,4BACA,aACAX,iBACAA,qBAEA,kFACA,uDACA,qDAfAuK,IAqBAA,gDAAA,2IAOA,GANAvK,UACAA,gBACAA,aACAA,mBACAA,sBACAA,yCACAA,YACA,kFACAA,WAAA,4CAEA,qDAXAuK,IAkBAA,WACAC,sCAAA,4CACA,iGACAxK,qBACA,oCACAA,4BACAA,sBACAA,aAEAA,YAEAA,kBACA,6BACAA,aACAA,mBAEA,sCACAA,gBACA,2CACA,uDAlBAwK,IAoBAD,wDACAvK,yBACAA,YACAA,WACAyK,eACAC,kBACA,gCACA1K,2BACA,CACAiK,kBACAU,MACAC,MACAC,YACAC,wCAEA,KACA,GAEA9K,kBACA2I,KACA3I,wBAEA+K,mBACA/K,UACAA,iCAOAuK,wDACAvK,mCACAA,OACAA,yBACAA,uBACA2I,KACA3I,eAIAgL,yBACAT,0CACAA,uCACAA,2CACAA,4CAEAU,mBACA,oBACA,aACAzC,wDACAC,aACAC,WAIAwC,SACArK,6BACA,+CACA,eAAAsK,cACA,cAEArK,2BACA,qCACA,kBAEAuD,yBACA,0BAMAH,4BAAA,WACAkH,uBACA,wBACA,iCACA,4BACA,GAAAC,aAAAC,YACA,kCAAAC,aAAA,OAEA,MAEAlL,wBACA,wBACA,cAEAC,iBACA,sBACA,wBACA,yBACA,4BACA,WACA,2BACA,cACA,uBACA,kBACA,sBACA,sBACA,iBACA,qBACA,kBACA,gBACA,YACAuI,SACAC,aAEA,eAEA0C,yBACA,SACA,mDACAvE,8BACAtG,cACA8K,wCACAC,iBAEA/K,YACA8K,uBACAC,0BACA5J,uBAGAnB,kCAEAgL,gCAAA,kKACAC,IACAxF,SACAyF,0BACAC,kBACAC,uBACA,WACAC,iBACA,uBACA,cAqDA,OApDAA,8BACAA,0CACAC,2CACAD,WACAA,sCACA3E,yCAEA2E,iBACAE,sCACAC,EACAC,wBACA,UACAR,oCAGAQ,2BACA,UACAR,wCAGA7K,kCACA,kCACA6K,0DAEA,cACAS,YACAC,qBACA,uCAEAC,wBAEA,iBACA,WACAX,qBACAA,gDAEAA,UACAA,qBAGAb,mBACA,WAGA,8DADAyB,UAGAZ,+BAEAA,gCAIA,KAEA,wDAhEA,IAkEAa,wBACA,kCACA,mCACA,cACA,yBAEA,mDACA,kCAEA,aACA,kDAEA,aACA,qBAEAC,wBACA,4BACA,4BAYA,OAXA,8DACA,2DACA,aACAC,GAEA,GACA,8DACA,aACAA,QAEA,0BAIA,8DACA,2DACA,aACAC,GAEA,GACA,8DACA,aACAA,GAEA,0BAEAC,kBAAA,0JAIA,GAHA,WACA,kBACA,eAEA,+BACAC,mCACAA,EACAV,wBACA,oCAEArL,kCACA,UACA,+CAEA,mBACA,oBAEAqL,2BACA,UACA,wCAGArB,mBACA,WAGA,8DADAgC,UAGA,+BAEA,6BAGA,oBACA,0BACA,gBAEA,sDAEA,WACAC,sBACAtC,kBACA,mBACA,0BACA,iBAGAK,mBACA,yCACA,oBACA,0BACA,aACA,2BACA,iCACA,2CAvDA,IA0DAkC,uBAAA,oKACA,WACAC,KACAC,KACA,kBACA,cAEArJ,IAAA,uDAKA,GAJAsJ,oDAEA,+BACA,qBACA,2BAEA,iDACA,sCAAAC,SACA,0DACAA,2BACA,uCAEAH,UACA,0BACA,cACA,wBAEAJ,gCACAK,UACAL,EACA/L,kCACAmM,QACAvM,IACA2M,aAIAlB,2BACA,UACA,wCAGArB,mBAGA,8DADAgC,UAGA,+BAEA,4BAEA,aACA,sCACA,QAEA,kBACA,sDAIA,OAJA,8BAEA,sCACA,6BACA,8CAnDAjJ,IAAA,uBAuDA,gDACA,cACA,0DAhEA,IAkEA7C,qBAIA,GAHA,aACA,uCAEA,kBACA,OACA,+BACA,sDACAsI,+CAEA,oDAGA,8DAGA,+CAEAnE,2BACA,oFACAmI,6BACAC,wCACAC,mDACA,cAEAC,wBAAA,WACA,qBACA,iBACAC,WACAA,MACAA,MACA,KACA,6BACA,SACAA,OACAA,8BACAA,cACA,KACA,uCACA,4BACA,sBACA,EACAnI,WACA,qBACA,YACA,uCACA,uBACA,0BACA,mBACA,OACA,CACA5E,gBACAkC,gCAEA,CACAlC,iBACAkC,UAEA,CACAlC,qBACAkC,SAEA,CACAlC,MACA4E,oBAEA,aADA,uBAEA1C,SAEA,CACAlC,gBACAkC,SAEA,CACAlC,kBACAkC,8EAEA,CACAlC,kBACAkC,yCAMA,CACAlC,cACAkC,yCAEA,CACAlC,aACAkC,UAEA,oBACA,+BAGA,c","file":"js/chunk-139736da.f7bb1461.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('success-modal',{attrs:{\"show-success-modal\":_vm.showSuccessModal,\"show-success-swap\":_vm.showSuccessSwap,\"success-title\":_vm.successTitle,\"reset-success\":_vm.resetSuccess,\"reset\":_vm.reset,\"network\":_vm.network,\"links\":_vm.links,\"success-body-text\":_vm.successBodyText,\"has-close-button\":false}}),_c('cross-chain-confirmation',{attrs:{\"show-cross-chain-modal\":_vm.showCrossChainModal,\"tx-obj\":_vm.tx,\"title\":_vm.title,\"reset\":_vm.rejectTransaction,\"sent-btc\":_vm.sendCrossChain},on:{\"close\":_vm.rejectTransaction}}),_c('app-modal',{attrs:{\"show\":_vm.showTxOverlay,\"title\":_vm.title !== '' ? _vm.title : 'Confirmation',\"close\":_vm.rejectTransaction,\"btn-action\":_vm.btnAction,\"btn-enabled\":_vm.disableBtn,\"btn-text\":_vm.toNonEth ? 'Proceed with swap' : 'Confirm & Send',\"scrollable\":true,\"anchored\":true,\"width\":\"650\"},on:{\"close\":_vm.rejectTransaction},scopedSlots:_vm._u([{key:\"dialogBody\",fn:function(){return [_c('v-card-text',{ref:\"scrollableContent\",staticClass:\"py-0 px-4 px-md-0\"},[_c('div',{staticClass:\"px-4 py-6 pr-6 textBlack2--text border-radius--5px mb-5\"},[_c('b',[_vm._v(\"Please double check everything.\")]),_vm._v(\" MEW team will not be able to reverse your transaction once its submitted. You will still be charged gas fee even if the transaction fails. \"),_c('a',{attrs:{\"href\":_vm.getArticle('my-txn-failed-charged'),\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Learn more.\")])]),(!_vm.isSwap)?_c('confirmation-send-transaction-details',{attrs:{\"to\":_vm.txTo,\"network\":_vm.network,\"tx-fee\":_vm.txFee,\"tx-fee-usd\":_vm.txFeeUSD,\"value\":_vm.value,\"to-tx-data\":_vm.tx.toTxData,\"to-details\":_vm.allToDetails,\"send-currency\":_vm.sendCurrency}}):_c('confirmation-swap-transaction-details',{attrs:{\"to\":_vm.swapInfo.to,\"from\":_vm.swapInfo.from,\"from-img\":_vm.swapInfo.fromImg,\"from-type\":_vm.swapInfo.fromType,\"to-type\":_vm.swapInfo.toType,\"to-img\":_vm.swapInfo.toImg,\"from-val\":_vm.swapInfo.fromVal,\"to-val\":_vm.swapInfo.toVal,\"provider\":_vm.swapInfo.selectedProvider,\"to-usd\":_vm.swapInfo.toUsdVal,\"from-usd\":_vm.swapInfo.fromUsdVal,\"tx-fee\":_vm.swapInfo.txFee,\"gas-price-type\":_vm.swapInfo.gasPriceType,\"is-hardware\":_vm.isHardware,\"is-to-non-eth\":_vm.toNonEth,\"to-currency\":_vm.swapInfo.toType,\"to-address\":_vm.swapInfo.to}}),(_vm.isOnLedger)?_c('div',{staticClass:\"ledger-warning d-flex justify-space-between px-4 py-6 border-radius--5px mb-5\"},[_c('div',[_c('v-img',{staticClass:\"ml-15\",attrs:{\"src\":require('@/assets/images/icons/hardware-wallets/Ledger-Nano-X-Label-Icon.svg'),\"alt\":\"Ledger Wallet\",\"max-width\":\"11em\",\"max-height\":\"2.5em\",\"contain\":\"\"}})],1),_c('span',{staticClass:\"textBlack2--text ml-2\"},[_c('b',[_vm._v(\"Using Ledger?\")]),_vm._v(\" Consider turning off 'debug data' before proceeding. Additional steps associated with the 'debug \"),_c('br'),_vm._v(\" feature' on Ledger may be required to approve this transaction. \")])]):_vm._e(),(_vm.showConfirmWithWallet)?_c('confirm-with-wallet',{attrs:{\"tx-length\":_vm.unsignedTxArr.length > 0 ? _vm.unsignedTxArr.length : 1,\"signed\":_vm.signingPending,\"error\":_vm.error}}):_vm._e(),_c('v-expansion-panels',{staticClass:\"expansion-border\",attrs:{\"accordion\":\"\",\"multiple\":\"\",\"flat\":\"\"},model:{value:(_vm.panel),callback:function ($$v) {_vm.panel=$$v},expression:\"panel\"}},_vm._l((_vm.transactions),function(transaction,i){return _c('v-expansion-panel',{key:(\"\" + (transaction.title) + (transaction.value) + i),class:{\n              'expansion-panel-border-bottom':\n                _vm.transactions.length > 1 && i !== _vm.transactions.length - 1\n            },on:{\"click\":function($event){return _vm.scrollToElement(i)}}},[_c('v-expansion-panel-header',{staticClass:\"expansion-header\",attrs:{\"disable-icon-rotate\":_vm.signing}},[_c('v-row',{staticClass:\"align-center pr-7 pl-2\"},[_c('p',{staticClass:\"ma-0 pl-1\"},[_c('span',{staticClass:\"font-weight-bold\"},[_vm._v(\"Transaction \"+_vm._s(_vm.transactions.length > 1 ? (\"\" + (i + 1)) : \"details\")+\" \")]),_c('br'),(_vm.isBatch)?_c('span',{staticClass:\"ma-0 mew-label greyPrimary--text\"},[_vm._v(_vm._s(_vm.isSwap ? 'Swap ' : '')+\" part \"+_vm._s(i + 1)+\" - \"+_vm._s(_vm.dataToAction(_vm.unsignedTxArr[i])))]):(_vm.dataToAction(_vm.tx) !== '')?_c('span',{staticClass:\"ma-0 mew-label greyPrimary--text\"},[_vm._v(_vm._s(_vm.dataToAction(_vm.tx)))]):_vm._e()]),_c('v-spacer'),(_vm.signing)?_c('div',[_c('v-progress-circular',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      _vm.error === '' && _vm.isBatch && _vm.signedTxArray.length < i + 1\n                    ),expression:\"\\n                      error === '' && isBatch && signedTxArray.length < i + 1\\n                    \"}],staticClass:\"pr-7\",attrs:{\"indeterminate\":\"\",\"color\":\"greenPrimary\",\"size\":\"20\",\"width\":\"2\"}}),_c('v-progress-circular',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      !_vm.isBatch && Object.keys(_vm.signedTxObject).length === 0\n                    ),expression:\"\\n                      !isBatch && Object.keys(signedTxObject).length === 0\\n                    \"}],staticClass:\"pr-7\",attrs:{\"indeterminate\":\"\",\"color\":\"greenPrimary\",\"size\":\"20\",\"width\":\"2\"}}),_c('v-icon',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      !_vm.isBatch && Object.keys(_vm.signedTxObject).length !== 0\n                    ),expression:\"\\n                      !isBatch && Object.keys(signedTxObject).length !== 0\\n                    \"}],attrs:{\"color\":\"greenPrimary\"}},[_vm._v(\" mdi-check \")]),_c('v-icon',{directives:[{name:\"show\",rawName:\"v-show\",value:(\n                      _vm.error === '' && _vm.isBatch && _vm.signedTxArray.length >= i + 1\n                    ),expression:\"\\n                      error === '' && isBatch && signedTxArray.length >= i + 1\\n                    \"}],attrs:{\"color\":\"greenPrimary\"}},[_vm._v(\" mdi-check \")])],1):_vm._e()],1)],1),_c('v-expansion-panel-content',{attrs:{\"id\":i}},[_c('div',{staticClass:\"pa-6 pt-0\"},_vm._l((transaction),function(txVal){return _c('v-row',{key:(\"\" + (txVal.title) + (txVal.value)),staticClass:\"d-flex justify-space-between mt-3\",attrs:{\"no-gutters\":\"\"}},[_c('v-col',{staticClass:\"d-flex d-sm-block ma-0 greyPrimary--text\",attrs:{\"cols\":\"12\",\"md\":\"3\"}},[_vm._v(\" \"+_vm._s(txVal.title)+\" \")]),_c('v-col',{attrs:{\"cols\":\"12\",\"md\":\"9\"}},[_c('app-scroll-block',[_c('div',{staticClass:\"data-values text-md-right\"},[_vm._v(\" \"+_vm._s(txVal.value)+\" \")])])],1)],1)}),1)])],1)}),1),(_vm.toNonEth)?_c('div',{staticClass:\"pt-4\"},[_vm._v(\" By clicking 'Proceed with swap', I agree to the \"),_c('a',{attrs:{\"href\":\"https://changelly.com/aml-kyc\",\"target\":\"_blank\"}},[_vm._v(\" Changelly AML/KYC \")]),_vm._v(\" and \"),_c('router-link',{attrs:{\"to\":_vm.termRoute,\"target\":\"_blank\"}},[_vm._v(\"Terms of Service\")])],1):_vm._e()],1)]},proxy:true}])}),_c('mew-overlay',{attrs:{\"footer\":_vm.footer,\"show-overlay\":_vm.showSignOverlay,\"title\":_vm.title ? _vm.title : 'Message',\"close\":_vm.reset,\"content-size\":\"large\"}},[_c('confirmation-messsage',{ref:\"messageConfirmationContainer\",attrs:{\"msg\":_vm.signature,\"copy\":_vm.copyToClipboard}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleConfirmation.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleConfirmation.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ModuleConfirmation.vue?vue&type=template&id=36644308&scoped=true&\"\nimport script from \"./ModuleConfirmation.vue?vue&type=script&lang=js&\"\nexport * from \"./ModuleConfirmation.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ModuleConfirmation.vue?vue&type=style&index=0&id=36644308&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"36644308\",\n  null\n  \n)\n\nexport default component.exports","import Web3 from 'web3';\nconst signatures = {\n  '0x095ea7b3': ({ data }) => {\n    const params = new Web3().eth.abi.decodeParameters(\n      ['address', 'uint256'],\n      `${data.substr(10)}`\n    );\n    const value = Web3.utils.toBN(params[1]);\n    if (value.isZero()) return 'Reset Approval';\n    return 'Approval';\n  },\n  '0x7c025200': () => {\n    return 'Swap';\n  },\n  '0x28ed4f6c': () => {\n    return 'Set ENS controller';\n  },\n  '0x23b872dd': () => {\n    return 'Transfer ENS name';\n  },\n  '0xacf1a841': () => {\n    return 'Renew ENS name';\n  },\n  '0xac9650d8': () => {\n    return 'Set ENS coins/text records';\n  },\n  '0xa9059cbb': () => {\n    return 'Transfer Tokens';\n  },\n  '0xca0bfcce': () => {\n    return `Eth2 Staking`;\n  },\n  '0xf14fcbc8': () => {\n    return 'ENS Commitment';\n  },\n  '0xf7a16963': () => {\n    return 'ENS Registration';\n  },\n  '0x33aaf6f2': () => {\n    return 'ETH Blocks Mint';\n  }\n};\nconst getSignature = data => data.substr(0, 10);\nexport default tx => {\n  if (!tx.data || tx.data === '0x') return '';\n  else if (!signatures[getSignature(tx.data)]) return '';\n  return signatures[getSignature(tx.data)]({\n    from: tx.from,\n    to: tx.to,\n    data: tx.data,\n    value: tx.value\n  });\n};\n","import BigNumber from 'bignumber.js';\nimport store from '@/core/store';\nimport Web3 from 'web3';\nfunction parseTokensData(data, to) {\n  const web3 = new Web3();\n  const token = store.getters['external/contractToToken'](to);\n  const jsonInterface = {\n    constant: false,\n    inputs: [\n      { name: '_to', type: 'address' },\n      { name: '_amount', type: 'uint256' }\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  };\n  const transferFuncSig = web3.eth.abi.encodeFunctionSignature(jsonInterface);\n  const tokenData = {\n    tokenTransferTo: '',\n    tokenTransferVal: '',\n    tokenSymbol: ''\n  };\n  if (data.substr(0, 10) === transferFuncSig) {\n    const params = web3.eth.abi.decodeParameters(\n      ['address', 'uint256'],\n      `${data.substr(10)}`\n    );\n    const value = new BigNumber(params[1]);\n    tokenData.tokenTransferTo = params[0];\n    tokenData.tokenTransferVal = token\n      ? value.div(new BigNumber(10).pow(token.decimals)).toFixed().toString()\n      : value.toString();\n    tokenData.tokenSymbol = token ? token.symbol : 'Unidentified Token';\n  }\n  return tokenData;\n}\n\nexport default parseTokensData;\n","module.exports = __webpack_public_path__ + \"img/Ledger-Nano-X-Label-Icon.e56dc6a3.svg\";","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleConfirmation.vue?vue&type=style&index=0&id=36644308&prod&lang=scss&scoped=true&\"","<template>\n  <div>\n    <success-modal\n      :show-success-modal=\"showSuccessModal\"\n      :show-success-swap=\"showSuccessSwap\"\n      :success-title=\"successTitle\"\n      :reset-success=\"resetSuccess\"\n      :reset=\"reset\"\n      :network=\"network\"\n      :links=\"links\"\n      :success-body-text=\"successBodyText\"\n      :has-close-button=\"false\"\n    />\n    <cross-chain-confirmation\n      :show-cross-chain-modal=\"showCrossChainModal\"\n      :tx-obj=\"tx\"\n      :title=\"title\"\n      :reset=\"rejectTransaction\"\n      :sent-btc=\"sendCrossChain\"\n      @close=\"rejectTransaction\"\n    />\n    <app-modal\n      :show=\"showTxOverlay\"\n      :title=\"title !== '' ? title : 'Confirmation'\"\n      :close=\"rejectTransaction\"\n      :btn-action=\"btnAction\"\n      :btn-enabled=\"disableBtn\"\n      :btn-text=\"toNonEth ? 'Proceed with swap' : 'Confirm & Send'\"\n      :scrollable=\"true\"\n      :anchored=\"true\"\n      width=\"650\"\n      @close=\"rejectTransaction\"\n    >\n      <template #dialogBody>\n        <v-card-text ref=\"scrollableContent\" class=\"py-0 px-4 px-md-0\">\n          <div class=\"px-4 py-6 pr-6 textBlack2--text border-radius--5px mb-5\">\n            <b>Please double check everything.</b> MEW team will not be able to\n            reverse your transaction once its submitted. You will still be\n            charged gas fee even if the transaction fails.\n            <a\n              :href=\"getArticle('my-txn-failed-charged')\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              >Learn more.</a\n            >\n          </div>\n          <confirmation-send-transaction-details\n            v-if=\"!isSwap\"\n            :to=\"txTo\"\n            :network=\"network\"\n            :tx-fee=\"txFee\"\n            :tx-fee-usd=\"txFeeUSD\"\n            :value=\"value\"\n            :to-tx-data=\"tx.toTxData\"\n            :to-details=\"allToDetails\"\n            :send-currency=\"sendCurrency\"\n          />\n          <confirmation-swap-transaction-details\n            v-else\n            :to=\"swapInfo.to\"\n            :from=\"swapInfo.from\"\n            :from-img=\"swapInfo.fromImg\"\n            :from-type=\"swapInfo.fromType\"\n            :to-type=\"swapInfo.toType\"\n            :to-img=\"swapInfo.toImg\"\n            :from-val=\"swapInfo.fromVal\"\n            :to-val=\"swapInfo.toVal\"\n            :provider=\"swapInfo.selectedProvider\"\n            :to-usd=\"swapInfo.toUsdVal\"\n            :from-usd=\"swapInfo.fromUsdVal\"\n            :tx-fee=\"swapInfo.txFee\"\n            :gas-price-type=\"swapInfo.gasPriceType\"\n            :is-hardware=\"isHardware\"\n            :is-to-non-eth=\"toNonEth\"\n            :to-currency=\"swapInfo.toType\"\n            :to-address=\"swapInfo.to\"\n          />\n\n          <!-- Ledger Warning Sheet -->\n          <div\n            v-if=\"isOnLedger\"\n            class=\"ledger-warning d-flex justify-space-between px-4 py-6 border-radius--5px mb-5\"\n          >\n            <div>\n              <v-img\n                :src=\"\n                  require('@/assets/images/icons/hardware-wallets/Ledger-Nano-X-Label-Icon.svg')\n                \"\n                alt=\"Ledger Wallet\"\n                max-width=\"11em\"\n                max-height=\"2.5em\"\n                contain\n                class=\"ml-15\"\n              />\n            </div>\n            <span class=\"textBlack2--text ml-2\">\n              <b>Using Ledger?</b> Consider turning off 'debug data' before\n              proceeding. Additional steps associated with the 'debug\n              <br />\n              feature' on Ledger may be required to approve this transaction.\n            </span>\n          </div>\n          <!-- transaction details -->\n          <confirm-with-wallet\n            v-if=\"showConfirmWithWallet\"\n            :tx-length=\"unsignedTxArr.length > 0 ? unsignedTxArr.length : 1\"\n            :signed=\"signingPending\"\n            :error=\"error\"\n          />\n\n          <v-expansion-panels\n            v-model=\"panel\"\n            accordion\n            multiple\n            flat\n            class=\"expansion-border\"\n          >\n            <v-expansion-panel\n              v-for=\"(transaction, i) in transactions\"\n              :key=\"`${transaction.title}${transaction.value}${i}`\"\n              :class=\"{\n                'expansion-panel-border-bottom':\n                  transactions.length > 1 && i !== transactions.length - 1\n              }\"\n              @click=\"scrollToElement(i)\"\n            >\n              <v-expansion-panel-header\n                :disable-icon-rotate=\"signing\"\n                class=\"expansion-header\"\n              >\n                <v-row class=\"align-center pr-7 pl-2\">\n                  <p class=\"ma-0 pl-1\">\n                    <span class=\"font-weight-bold\"\n                      >Transaction\n                      {{ transactions.length > 1 ? `${i + 1}` : `details` }}\n                    </span>\n                    <br />\n                    <span\n                      v-if=\"isBatch\"\n                      class=\"ma-0 mew-label greyPrimary--text\"\n                      >{{ isSwap ? 'Swap ' : '' }} part {{ i + 1 }} -\n                      {{ dataToAction(unsignedTxArr[i]) }}</span\n                    >\n                    <span\n                      v-else-if=\"dataToAction(tx) !== ''\"\n                      class=\"ma-0 mew-label greyPrimary--text\"\n                      >{{ dataToAction(tx) }}</span\n                    >\n                  </p>\n                  <v-spacer />\n                  <div v-if=\"signing\">\n                    <v-progress-circular\n                      v-show=\"\n                        error === '' && isBatch && signedTxArray.length < i + 1\n                      \"\n                      indeterminate\n                      color=\"greenPrimary\"\n                      size=\"20\"\n                      width=\"2\"\n                      class=\"pr-7\"\n                    />\n                    <v-progress-circular\n                      v-show=\"\n                        !isBatch && Object.keys(signedTxObject).length === 0\n                      \"\n                      indeterminate\n                      color=\"greenPrimary\"\n                      size=\"20\"\n                      width=\"2\"\n                      class=\"pr-7\"\n                    />\n                    <v-icon\n                      v-show=\"\n                        !isBatch && Object.keys(signedTxObject).length !== 0\n                      \"\n                      color=\"greenPrimary\"\n                    >\n                      mdi-check\n                    </v-icon>\n                    <v-icon\n                      v-show=\"\n                        error === '' && isBatch && signedTxArray.length >= i + 1\n                      \"\n                      color=\"greenPrimary\"\n                    >\n                      mdi-check\n                    </v-icon>\n                  </div>\n                </v-row>\n              </v-expansion-panel-header>\n              <v-expansion-panel-content :id=\"i\">\n                <div class=\"pa-6 pt-0\">\n                  <v-row\n                    v-for=\"txVal in transaction\"\n                    :key=\"`${txVal.title}${txVal.value}`\"\n                    class=\"d-flex justify-space-between mt-3\"\n                    no-gutters\n                  >\n                    <v-col\n                      cols=\"12\"\n                      md=\"3\"\n                      class=\"d-flex d-sm-block ma-0 greyPrimary--text\"\n                    >\n                      {{ txVal.title }}\n                    </v-col>\n\n                    <v-col cols=\"12\" md=\"9\">\n                      <app-scroll-block>\n                        <div class=\"data-values text-md-right\">\n                          {{ txVal.value }}\n                        </div>\n                      </app-scroll-block>\n                    </v-col>\n                  </v-row>\n                </div>\n              </v-expansion-panel-content>\n            </v-expansion-panel>\n          </v-expansion-panels>\n          <div v-if=\"toNonEth\" class=\"pt-4\">\n            By clicking 'Proceed with swap', I agree to the\n            <a href=\"https://changelly.com/aml-kyc\" target=\"_blank\">\n              Changelly AML/KYC\n            </a>\n            and\n            <router-link :to=\"termRoute\" target=\"_blank\"\n              >Terms of Service</router-link\n            >\n          </div>\n        </v-card-text>\n      </template>\n    </app-modal>\n    <!--\n    ====================================================================================\n      Sign Message Confirmation\n    =====================================================================================\n    -->\n    <mew-overlay\n      :footer=\"footer\"\n      :show-overlay=\"showSignOverlay\"\n      :title=\"title ? title : 'Message'\"\n      :close=\"reset\"\n      content-size=\"large\"\n    >\n      <confirmation-messsage\n        ref=\"messageConfirmationContainer\"\n        :msg=\"signature\"\n        :copy=\"copyToClipboard\"\n      />\n    </mew-overlay>\n  </div>\n</template>\n\n<script>\nimport {\n  fromWei,\n  hexToNumberString,\n  hexToNumber,\n  toWei,\n  sha3,\n  isHex\n} from 'web3-utils';\nimport { isEmpty, isArray, cloneDeep } from 'lodash';\nimport { mapState, mapGetters } from 'vuex';\nimport BigNumber from 'bignumber.js';\nimport * as locStore from 'store';\n\nimport WALLET_TYPES from '@/modules/access-wallet/common/walletTypes';\nimport EventNames from '@/utils/web3-provider/events.js';\n\nimport { Toast, SUCCESS } from '@/modules/toast/handler/handlerToast';\nimport parseTokenData from './handlers/parseTokenData';\nimport { EventBus } from '@/core/plugins/eventBus';\nimport { setEvents } from '@/utils/web3-provider/methods/utils';\nimport { sanitizeHex } from '@/modules/access-wallet/common/helpers';\nimport dataToAction from './handlers/dataToAction';\nimport handlerAnalytics from '@/modules/analytics-opt-in/handlers/handlerAnalytics.mixin';\nimport { ROUTES_HOME } from '@/core/configs/configRoutes';\nimport errorHandler from './handlers/errorHandler';\n\nexport default {\n  name: 'ModuleConfirmation',\n  components: {\n    AppScrollBlock: () => import('@/core/components/AppScrollBlock'),\n    ConfirmationMesssage: () => import('./components/ConfirmationMessage'),\n    AppModal: () => import('@/core/components/AppModal'),\n    ConfirmationSwapTransactionDetails: () =>\n      import('./components/ConfirmationSwapTransactionDetails'),\n    ConfirmationSendTransactionDetails: () =>\n      import('./components/ConfirmationSendTransactionDetails'),\n    ConfirmWithWallet: () => import('./components/ConfirmWithWallet'),\n    SuccessModal: () => import('./components/SuccessModal'),\n    CrossChainConfirmation: () => import('./components/CrossChainConfirmation')\n  },\n  mixins: [handlerAnalytics],\n  data() {\n    return {\n      footer: {\n        text: 'Need help?',\n        linkTitle: 'Contact support',\n        link: 'mailto:support@myetherwallet.com'\n      },\n      showTxOverlay: false,\n      showSignOverlay: false,\n      showSuccessModal: false,\n      showSuccessSwap: false,\n      showCrossChainModal: false,\n      toNonEth: false,\n      isSwap: false,\n      tx: {},\n      resolver: () => {},\n      title: '',\n      signedTxObject: {},\n      signature: '',\n      unsignedTxArr: [],\n      signedTxArray: [],\n      swapInfo: {},\n      sendCurrency: {},\n      toDetails: {},\n      signing: false,\n      links: {\n        ethvm: '',\n        explorer: ''\n      },\n      error: '',\n      panel: [],\n      termRoute: `/${ROUTES_HOME.TERMS_OF_SERVICE.PATH}`\n    };\n  },\n  computed: {\n    ...mapState('wallet', [\n      'instance',\n      'web3',\n      'address',\n      'identifier',\n      'isHardware',\n      'isOfflineApp'\n    ]),\n    ...mapGetters('external', ['fiatValue']),\n    ...mapGetters('global', ['network', 'getFiatValue']),\n    ...mapGetters('article', ['getArticle']),\n    ...mapState('addressBook', ['addressBookStore']),\n    txTo() {\n      if (!this.isBatch)\n        return this.tx.hasOwnProperty('toTxData')\n          ? this.tx.toTxData.to\n          : this.tx.to;\n      return this.unsignedTxArr[0].to;\n    },\n    isWeb3Wallet() {\n      return (\n        this.identifier === WALLET_TYPES.WEB3_WALLET ||\n        this.identifier === WALLET_TYPES.WALLET_CONNECT\n      );\n    },\n    isOtherWallet() {\n      return (\n        this.identifier === WALLET_TYPES.MEW_CONNECT ||\n        this.identifier === WALLET_TYPES.WALLET_LINK\n      );\n    },\n    isOnLedger() {\n      return this.tx.data !== '0x' && this.identifier === WALLET_TYPES.LEDGER;\n    },\n    isNotSoftware() {\n      return this.isHardware || this.isWeb3Wallet || this.isOtherWallet;\n    },\n    showConfirmWithWallet() {\n      return this.isNotSoftware && (this.signing || this.error !== '');\n    },\n    transactions() {\n      const newArr =\n        this.unsignedTxArr.length > 0\n          ? [].concat(this.unsignedTxArr)\n          : isEmpty(this.tx)\n          ? []\n          : [this.tx];\n      return this.arrayParser(newArr);\n    },\n    allToDetails() {\n      const toNickname = this.addressBookStore.find(item => {\n        return this.tx.to?.toLowerCase() === item.address?.toLowerCase();\n      });\n      return {\n        ensName: this.toDetails.type === 'RESOLVED' ? this.toDetails.value : '',\n        nickname: toNickname ? toNickname.nickname : '',\n        selected: this.toDetails.type\n      };\n    },\n    gasPrice() {\n      if (!this.isBatch) {\n        const gasPrice = this.tx.gasPrice ? this.tx.gasPrice : '0x';\n        return fromWei(hexToNumberString(gasPrice), 'gwei');\n      }\n\n      const batchGasPrice = this.unsignedTxArr[0].gasPrice;\n      return fromWei(hexToNumberString(batchGasPrice), 'gwei');\n    },\n    gasLimit() {\n      if (!this.isBatch) {\n        const gasLimit = this.tx.gasLimit\n          ? this.tx.gasLimit\n          : this.tx.gas\n          ? this.tx.gas\n          : '0x';\n        return hexToNumberString(gasLimit);\n      }\n      const batchGasPrice = this.unsignedTxArr.reduce((acc, currentValue) => {\n        return acc.plus(currentValue.gas);\n      }, BigNumber(0));\n      return hexToNumberString(batchGasPrice);\n    },\n    txFee() {\n      const parsedTxFee = BigNumber(toWei(this.gasPrice, 'gwei'))\n        .times(this.gasLimit)\n        .toString();\n      return fromWei(parsedTxFee);\n    },\n    txFeeUSD() {\n      return this.getFiatValue(\n        BigNumber(this.txFee).times(this.fiatValue).toFixed(2)\n      );\n    },\n    value() {\n      if (!this.isBatch) {\n        const parsedValue = this.tx.value\n          ? this.tx.hasOwnProperty('toTxData')\n            ? this.tx.toTxData.amount\n            : fromWei(hexToNumberString(this.tx.value))\n          : '0x';\n        return parsedValue;\n      }\n      return '0';\n    },\n    disableBtn() {\n      if (this.error !== '') return true;\n      if (!this.signing) return true;\n      if (this.isBatch && this.identifier === WALLET_TYPES.LEDGER) {\n        return false;\n      }\n      return this.txSigned;\n    },\n    txSigned() {\n      return this.isBatch\n        ? this.signedTxArray.length > 0 &&\n            this.signedTxArray.length === this.unsignedTxArr.length\n        : !isEmpty(this.signedTxObject);\n    },\n    isBatch() {\n      return this.unsignedTxArr.length > 0;\n    },\n    signingPending() {\n      if (this.isBatch) {\n        return this.unsignedTxArr.length === this.signedTxArray.length;\n      }\n      return !isEmpty(this.signedTxObject);\n    },\n    /**\n     * Property returns string, deodning whether or not this is a swap or send\n     */\n    successTitle() {\n      return this.showSuccessSwap ? 'Swap initiated' : 'Transaction initiated';\n    },\n    /**\n     * Property returns string, depending whether or not this is a swap or send\n     */\n    successBodyText() {\n      return this.showSuccessSwap\n        ? 'Once completed, the token amount will be deposited to your wallet. This should take a few minutes depending on how congested the Ethereum network is.'\n        : 'Once completed, the token amount will be deposited to the address you provided. This should take a few minutes depending on how congested the Ethereum network is.';\n    }\n  },\n  watch: {\n    error(newVal) {\n      /**\n       * Reset signed values if any of the tx in batch is declined\n       */\n      if (newVal !== '') {\n        this.signedTxArray = [];\n        this.signedTxObject = {};\n      }\n    },\n    /**\n     * Closes modal then brings it back to the start fetching new address data\n     */\n    address(newVal) {\n      if (newVal) {\n        this.resetSuccess();\n      }\n    },\n    signedTxArray: {\n      handler: function (newVal) {\n        if (\n          this.isWeb3Wallet &&\n          newVal.length !== 0 &&\n          newVal.length === this.unsignedTxArr.length\n        ) {\n          if (this.isSwap) {\n            this.trackSwap('swapTransactionSuccessfullySent');\n          }\n          this.showTxOverlay = false;\n          this.showSuccess(newVal);\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  created() {\n    const _self = this;\n    /**\n     * receives an @Array\n     * arr[0] is the tx\n     * arr[1] is the to details (nickname, ens name)\n     * arr[2] is the selected currency\n     */\n    EventBus.$on(EventNames.SHOW_TX_CONFIRM_MODAL, async (tx, resolver) => {\n      this.parseRawData(tx[0]);\n      _self.title = 'Transaction Confirmation';\n      _self.tx = tx[0];\n      _self.resolver = resolver;\n      _self.showTxOverlay = true;\n      _self.tx.transactionFee = this.txFee;\n      _self.isSwap = false; // reset isSwap\n      tx[0].transactionFee = this.txFee;\n      if (tx.length > 1) {\n        _self.toDetails = tx[1];\n        _self.sendCurrency = tx[2];\n      }\n      if (!this.isHardware && this.identifier !== WALLET_TYPES.WEB3_WALLET)\n        await this.signTx();\n    });\n    /**\n     * receives an @Array\n     * arr[0] is the tx\n     * arr[1] is the swap information\n     */\n    EventBus.$on(EventNames.SHOW_SWAP_TX_MODAL, async (arr, resolver) => {\n      _self.tx = arr[0];\n      _self.swapInfo = arr[1];\n      _self.resolver = resolver;\n      _self.showTxOverlay = true;\n      _self.title = 'Verify Swap';\n      _self.toNonEth = !_self.swapInfo.toTokenType.isEth;\n      _self.isSwap = true;\n      if (!_self.isHardware && _self.identifier !== WALLET_TYPES.WEB3_WALLET) {\n        await _self.signTx();\n      }\n    });\n\n    /**\n     * receives an @Array\n     * arr[0] is the tx that may have confirmInfo\n     * which identifies the transaction as a swap tx\n     */\n    EventBus.$on(\n      EventNames.SHOW_BATCH_TX_MODAL,\n      async (arr, resolver, isHardware) => {\n        _self.isHardwareWallet = isHardware;\n        if (arr[0].hasOwnProperty('confirmInfo')) {\n          _self.swapInfo = arr[0].confirmInfo;\n          _self.title = 'Verify Swap';\n          _self.isSwap = true; // reset isSwap\n        } else {\n          _self.isSwap = false; // reset isSwap\n        }\n        _self.unsignedTxArr = arr;\n        if (!resolver) _self.resolver = () => {};\n        _self.resolver = resolver;\n        _self.showTxOverlay = true;\n\n        if (!isHardware && _self.identifier !== WALLET_TYPES.WEB3_WALLET) {\n          _self.signBatchTx();\n        }\n      }\n    );\n    EventBus.$on(EventNames.SHOW_MSG_CONFIRM_MODAL, (msg, resolver) => {\n      _self.title = 'Message Signed';\n      _self.isSwap = false; // reset isSwap\n      _self.instance\n        .signMessage(msg)\n        .then(res => {\n          const result = Buffer.from(res).toString('hex');\n          _self.signature = JSON.stringify(\n            {\n              address: _self.address,\n              msg: msg,\n              sig: result,\n              version: '3',\n              signer: _self.isHardware ? _self.identifier : 'MEW'\n            },\n            null,\n            2\n          );\n          _self.signedMessage = result;\n          resolver(result);\n          _self.showSignOverlay = true;\n        })\n        .catch(e => {\n          _self.reset();\n          _self.instance.errorHandler(e);\n        });\n    });\n    /**\n     * receives an @Object which contains info about the currency and rates\n     * and a resolver which resets the module confirmation\n     */\n    EventBus.$on(EventNames.SHOW_CROSS_CHAIN_MODAL, (txObj, resolver) => {\n      _self.title = `Send ${txObj.fromType}`;\n      _self.tx = txObj;\n      _self.showCrossChainModal = true;\n      _self.resolver = val => {\n        resolver(val);\n        _self.reset();\n      };\n    });\n  },\n  beforeDestroy() {\n    EventBus.$off(EventNames.SHOW_TX_CONFIRM_MODAL);\n    EventBus.$off(EventNames.SHOW_SWAP_TX_MODAL);\n    EventBus.$off(EventNames.SHOW_MSG_CONFIRM_MODAL);\n    EventBus.$off(EventNames.SHOW_CROSS_CHAIN_MODAL);\n  },\n  mounted() {\n    if (this.isOfflineApp) {\n      this.footer = {\n        text: 'Need help? Email us at support@myetherwallet.com',\n        linkTitle: '',\n        link: ''\n      };\n    }\n  },\n  methods: {\n    rejectTransaction() {\n      if (this.isSwap) this.trackSwap('swapTxCancelled');\n      this.resolver({ rejected: true });\n      this.reset();\n    },\n    sendCrossChain(bool) {\n      this.trackSwap('swapSendCrossChain');\n      this.resolver(bool);\n    },\n    dataToAction(data) {\n      return dataToAction(data);\n    },\n    /**\n     * Methods scrolls to an element if element is open on click.\n     * Has To be a timeoute, on order to wait for the element to be open\n     */\n    scrollToElement(_id) {\n      setTimeout(() => {\n        if (this.panel.includes(_id)) {\n          const panel = document.getElementById(_id);\n          const wrapper = this.$refs.scrollableContent;\n          const options = { duration: 500, offset: -60 };\n          this.$vuetify.goTo(panel, { container: wrapper, ...options });\n        }\n      }, 500);\n    },\n    resetSuccess() {\n      this.showSuccessSwap = false;\n      this.reset();\n    },\n    reset() {\n      this.showTxOverlay = false;\n      this.showSignOverlay = false;\n      this.showSuccessModal = false;\n      this.showCrossChainModal = false;\n      this.tx = {};\n      this.resolver = () => {};\n      this.title = '';\n      this.signedTxObject = {};\n      this.signature = '';\n      this.unsignedTxArr = [];\n      this.signedTxArray = [];\n      this.swapInfo = {};\n      this.sendCurrency = {};\n      this.toDetails = {};\n      this.signing = false;\n      this.links = {\n        ethvm: '',\n        explorer: ''\n      };\n      this.error = '';\n    },\n    parseRawData(tx) {\n      let tokenData = {};\n      if (tx.to && tx.data && tx.data.substr(0, 10) === '0xa9059cbb') {\n        tokenData = parseTokenData(tx.data, tx.to);\n        tx.fromTxData = {\n          currency: this.network.type.currencyName,\n          amount: tx.amount\n        };\n        tx.toTxData = {\n          currency: tokenData.tokenSymbol,\n          amount: tokenData.tokenTransferVal,\n          to: tokenData.tokenTransferTo\n        };\n      }\n      tx.network = this.network.type.name;\n    },\n    async sendBatchTransaction() {\n      const _this = this;\n      const web3 = this.web3;\n      const _method = 'sendSignedTransaction';\n      const _arr = this.signedTxArray;\n      const promises = _arr.map((tx, idx) => {\n        const _tx = tx.tx;\n        _tx.from = _this.address;\n        const _rawTx = tx.rawTransaction;\n        const promiEvent = web3.eth[_method](_rawTx);\n        _tx.network = _this.network.type.name;\n        _tx.gasPrice = isHex(_tx.gasPrice)\n          ? hexToNumberString(_tx.gasPrice)\n          : _tx.gasPrice;\n        _tx.transactionFee = fromWei(\n          BigNumber(_tx.gasPrice).times(_tx.gas).toString()\n        );\n        _tx.gasLimit = _tx.gas;\n        setEvents(promiEvent, _tx, _this.$store.dispatch);\n        promiEvent\n          .once('sent', () => {\n            if (_this.isSwap) {\n              _this.trackSwap('swapTxBroadcasted');\n            }\n          })\n          .once('receipt', () => {\n            if (_this.isSwap) {\n              _this.trackSwap('swapTxReceivedReceipt');\n            }\n          })\n          .on('transactionHash', hash => {\n            const storeKey = sha3(\n              `${_this.network.type.name}-${_this.address.toLowerCase()}`\n            );\n            const localStoredObj = locStore.get(storeKey);\n            locStore.set(storeKey, {\n              nonce: sanitizeHex(\n                new BigNumber(localStoredObj.nonce).plus(1).toString(16)\n              ),\n              timestamp: localStoredObj.timestamp\n            });\n            if (idx + 1 === _arr.length) {\n              if (_this.isSwap) {\n                _this.showSuccessSwap = true;\n                _this.trackSwap('swapTransactionSuccessfullySent');\n              }\n              _this.reset();\n              _this.showSuccess(hash);\n            }\n          })\n          .catch(err => {\n            if (_this.isSwap) {\n              if (\n                err.message ===\n                'MetaMask Tx Signature: User denied transaction signature.'\n              ) {\n                _this.trackSwap('swapTxCancelled');\n              } else {\n                _this.trackSwap('swapTxFailed');\n              }\n            }\n          });\n        return promiEvent;\n      });\n      this.resolver(promises);\n    },\n    sendSignedTx() {\n      const hash = this.signedTxObject.tx.hash;\n      this.resolver(this.signedTxObject);\n      if (this.isSwap) {\n        this.showSuccessSwap = true;\n      }\n      if (this.tx.data && this.tx.data.includes('0x33aaf6f2')) {\n        this.trackDapp('ethBlocksMinted');\n      }\n      if (this.isSwap) {\n        this.trackSwap('swapTransactionSuccessfullySent');\n      }\n      this.reset();\n      this.showSuccess(hash);\n    },\n    showSuccess(param) {\n      if (isArray(param)) {\n        const lastHash = param[param.length - 1].tx.hash;\n        this.links.ethvm = this.network.type.isEthVMSupported.supported\n          ? this.network.type.isEthVMSupported.blockExplorerTX.replace(\n              '[[txHash]]',\n              lastHash\n            )\n          : '';\n        this.links.explorer = this.network.type.blockExplorerTX.replace(\n          '[[txHash]]',\n          lastHash\n        );\n        this.showSuccessModal = true;\n        return;\n      }\n\n      this.links.ethvm = this.network.type.isEthVMSupported.supported\n        ? this.network.type.isEthVMSupported.blockExplorerTX.replace(\n            '[[txHash]]',\n            param\n          )\n        : '';\n      this.links.explorer = this.network.type.blockExplorerTX.replace(\n        '[[txHash]]',\n        param\n      );\n      this.showSuccessModal = true;\n    },\n    async signTx() {\n      this.error = '';\n      if (this.isNotSoftware) {\n        this.signing = true;\n      }\n      if (this.isWeb3Wallet) {\n        const event = this.instance.signTransaction(this.tx);\n        event\n          .once('sent', () => {\n            this.trackSwap('swapTxBroadcasted');\n          })\n          .on('transactionHash', res => {\n            if (this.isSwap) {\n              this.trackSwap('swapTransactionSuccessfullySent');\n            }\n            this.showTxOverlay = false;\n            this.showSuccess(res);\n          })\n          .once('receipt', () => {\n            if (this.isSwap) {\n              this.trackSwap('swapTxReceivedReceipt');\n            }\n          })\n          .catch(e => {\n            if (this.isSwap) {\n              if (\n                e.message ===\n                'MetaMask Tx Signature: User denied transaction signature.'\n              ) {\n                this.trackSwap('swapTxCancelled');\n              } else {\n                this.trackSwap('swapTxFailed');\n              }\n            }\n            this.signedTxObject = {};\n            this.error = errorHandler(e);\n            this.signing = false;\n          });\n        this.resolver(event);\n      } else {\n        await this.instance\n          .signTransaction(this.tx)\n          .then(res => {\n            this.signedTxObject = res;\n            if (this.isHardware && this.txSigned) {\n              this.btnAction();\n            }\n          })\n          .catch(e => {\n            if (this.isSwap) this.trackSwap('swapTxCancelled');\n            this.signedTxObject = {};\n            this.error = errorHandler(e);\n            this.signing = false;\n            const toastError = errorHandler(e, true);\n            if (toastError) this.instance.errorHandler(toastError);\n          });\n      }\n    },\n    async signBatchTx() {\n      this.error = '';\n      const signed = [];\n      const batchTxEvents = [];\n      if (this.isNotSoftware) {\n        this.signing = true;\n      }\n      for (let i = 0; i < this.unsignedTxArr.length; i++) {\n        const objClone = cloneDeep(this.unsignedTxArr[i]);\n        // fixes circular reference for signing\n        delete objClone['handleNotification'];\n        delete objClone['currency'];\n        delete objClone['confirmInfo'];\n        try {\n          if (!this.isWeb3Wallet) {\n            const _signedTx = await this.instance.signTransaction(objClone);\n            if (this.unsignedTxArr[i].hasOwnProperty('handleNotification')) {\n              _signedTx.tx['handleNotification'] =\n                this.unsignedTxArr[i].handleNotification;\n            }\n            signed.push(_signedTx);\n            if (this.isHardware && this.txSigned) {\n              this.btnAction();\n            }\n          } else {\n            const event = this.instance.signTransaction(objClone);\n            batchTxEvents.push(event);\n            event\n              .on('transactionHash', res => {\n                signed.push({\n                  tx: {\n                    hash: res\n                  }\n                });\n              })\n              .once('receipt', () => {\n                if (this.isSwap) {\n                  this.trackSwap('swapTxReceivedReceipt');\n                }\n              })\n              .catch(e => {\n                if (\n                  e.message ===\n                  'MetaMask Tx Signature: User denied transaction signature.'\n                ) {\n                  this.trackSwap('swapTxCancelled');\n                } else {\n                  this.trackSwap('swapTxFailed');\n                }\n                this.signing = false;\n                this.instance.errorHandler(e.message);\n              });\n          }\n          this.signedTxArray = signed;\n          if (this.isWeb3Wallet) this.resolver(batchTxEvents);\n        } catch (err) {\n          if (this.isSwap) this.trackSwap('swapTxFailed');\n          this.error = errorHandler(err);\n          this.signedTxArray = [];\n          return;\n        }\n      }\n      if (!this.isWeb3Wallet && !this.isHardware && !this.isOtherWallet) {\n        this.signing = false;\n      }\n    },\n    btnAction() {\n      if (this.isSwap) {\n        this.trackSwap('swapTransactionSend');\n      }\n      if (!this.isWeb3Wallet) {\n        if (\n          (this.signedTxArray.length === 0 ||\n            this.signedTxArray.length < this.unsignedTxArr.length) &&\n          isEmpty(this.signedTxObject)\n        ) {\n          this.isBatch ? this.signBatchTx() : this.signTx();\n          return;\n        }\n        this.isBatch ? this.sendBatchTransaction() : this.sendSignedTx();\n        return;\n      }\n      this.isBatch ? this.signBatchTx() : this.signTx();\n    },\n    copyToClipboard() {\n      this.$refs.messageConfirmationContainer.$refs.signatureContent.$refs.input.select();\n      document.execCommand('copy');\n      window.getSelection().removeAllRanges();\n      Toast(this.$t('common.copied'), {}, SUCCESS);\n      this.reset();\n    },\n    arrayParser(arr) {\n      const newArr = arr.map(item => {\n        const gasLimit = item.gasLimit\n          ? item.gasLimit\n          : item.gas\n          ? item.gas\n          : '0x';\n        const gasPrice = item.gasPrice ? item.gasPrice : '0x';\n        const data = item.data\n          ? item.data\n          : item.hasOwnProperty('encodeABI')\n          ? item.encodeABI()\n          : '0x';\n        const symbol = isEmpty(this.sendCurrency)\n          ? this.network.type.currencyName\n          : this.sendCurrency.symbol;\n        const value =\n          data !== '0x'\n            ? !this.isSwap && !this.isBatch\n              ? `${this.value} ${symbol}`\n              : `0 ${this.network.type.currencyName}`\n            : `${this.value} ${symbol}`;\n        const from = item.from ? item.from : this.address;\n        const toAdd = item.to ? item.to : this.txTo;\n        return [\n          {\n            title: 'Network',\n            value: this.network.type.name_long\n          },\n          {\n            title: 'From ENS',\n            value: ''\n          },\n          {\n            title: 'From address',\n            value: from\n          },\n          {\n            title:\n              data !== '0x' && !this.isBatch\n                ? 'Via Contract Address'\n                : 'To address',\n            value: toAdd\n          },\n          {\n            title: 'Sending',\n            value: value\n          },\n          {\n            title: 'Gas Price',\n            value: fromWei(hexToNumberString(gasPrice), 'gwei') + ' gwei'\n          },\n          {\n            title: 'Gas Limit',\n            value: hexToNumberString(gasLimit)\n          },\n          // {\n          //   title: 'Transaction fee',\n          //   value: `${this.txFee} ${this.network.type.currencyName} ~ $${this.txFeeUSD}`\n          // },\n          {\n            title: 'Nonce',\n            value: hexToNumber(item.nonce)\n          },\n          {\n            title: 'Data',\n            value: data\n          }\n        ].filter(item => {\n          if (item.value !== '') return item;\n        });\n      });\n      return newArr;\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n$borderPanels: 1px solid var(--v-greyLight-base) !important;\n.expansion-border {\n  border: $borderPanels;\n  border-radius: 8px;\n}\n\n.data-values {\n  overflow-wrap: break-word;\n}\n.expansion-header {\n  height: 60px;\n}\n.expansion-panel-border-bottom {\n  border-bottom: $borderPanels;\n}\n.ledger-warning {\n  border: 1px solid #d7dae3;\n}\n</style>\n"],"sourceRoot":""}