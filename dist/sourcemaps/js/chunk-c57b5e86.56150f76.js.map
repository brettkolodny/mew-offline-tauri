{"version":3,"sources":["webpack:///./src/modules/network/components/NetworkSwitch.vue?137b","webpack:///src/modules/network/components/NetworkSwitch.vue","webpack:///./src/modules/network/components/NetworkSwitch.vue?c36b","webpack:///./src/modules/network/components/NetworkSwitch.vue","webpack:///./src/modules/network/components/NetworkSwitch.vue?6e68"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","isSwapPage","hasNetworks","attrs","model","value","callback","$$v","toggleType","expression","_v","searchInput","on","setSearch","_e","showEmptySearch","emptySearchMes","networkSelected","_l","network","i","key","name","class","networks","length","icon","_s","name_long","networkLoading","staticRenderFns","components","AppUserMsgBlock","mixins","props","isWallet","type","default","filterTypes","data","networkSelectedBefore","nodes","computed","mapGetters","mapState","typeNames","Object","unsorted","sorted","allNetworks","item","title","subtitle","watch","validNetwork","matchNetwork","matched","mounted","methods","mapActions","hasString","symbol","setNetworkDebounced","walletType","then","setNetworkCall","Toast","catch","savePreviousNetwork","component"],"mappings":"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","file":"js/chunk-c57b5e86.56150f76.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"module-network-switch full-width\"},[(!_vm.isSwapPage && _vm.hasNetworks)?_c('v-row',{staticClass:\"align-end justify-center justify-sm-space-between pa-0\"},[_c('div',{staticClass:\"align-center align-sm-end justify-center pr-sm-3 pb-sm-3 order-sm-2 mt-10 mt-sm-0\"},[_c('v-btn-toggle',{attrs:{\"mandatory\":\"\",\"active-class\":\"textDark white--text alig-end\"},model:{value:(_vm.toggleType),callback:function ($$v) {_vm.toggleType=$$v},expression:\"toggleType\"}},[_c('v-btn',{attrs:{\"small\":\"\"}},[_vm._v(\"Main\")]),_c('v-btn',{attrs:{\"small\":\"\"}},[_vm._v(\"Test\")]),_c('v-btn',{attrs:{\"small\":\"\"}},[_vm._v(\"All\")])],1)],1),_c('v-col',{staticClass:\"order-sm-1\",attrs:{\"cols\":\"12\",\"sm\":\"7\"}},[_c('mew-search',{attrs:{\"placeholder\":\"Find Network\",\"value\":_vm.searchInput},on:{\"input\":_vm.setSearch}})],1)],1):_vm._e(),(_vm.showEmptySearch || _vm.isSwapPage)?_c('app-user-msg-block',{staticClass:\"mt-5\",attrs:{\"message\":_vm.emptySearchMes,\"is-alert\":_vm.isSwapPage}}):_vm._e(),_c('v-radio-group',{model:{value:(_vm.networkSelected),callback:function ($$v) {_vm.networkSelected=$$v},expression:\"networkSelected\"}},_vm._l((_vm.networks),function(network,i){return _c('v-container',{key:network.name,class:[\n        { 'network-border-first': i === 0 },\n        { 'network-border-last': i + 1 === _vm.networks.length },\n        'py-4 px-5 network-border'\n      ]},[_c('v-row',{staticClass:\"pa-0 mew-body align-center justify-start\"},[_c('mew-token-container',{attrs:{\"img\":network.icon,\"size\":\"24px\"}}),_c('div',{staticClass:\"textDark--text Capitalize pl-3\"},[_vm._v(\" \"+_vm._s(network.name)+\" \")]),_c('div',{staticClass:\"px-2 textLight--text\"},[_vm._v(\"-\")]),_c('div',{staticClass:\"textLight--text\"},[_vm._v(\" \"+_vm._s(network.name_long)+\" \")]),_c('v-spacer'),_c('v-radio',{class:['py-2 mb-0'],attrs:{\"value\":network.name,\"disabled\":_vm.networkLoading}})],1)],1)}),1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"module-network-switch full-width\">\n    <v-row\n      v-if=\"!isSwapPage && hasNetworks\"\n      class=\"align-end justify-center justify-sm-space-between pa-0\"\n    >\n      <!-- ===================================================================================== -->\n      <!-- Toggle: Main/Test/All -->\n      <!-- ===================================================================================== -->\n      <div\n        class=\"align-center align-sm-end justify-center pr-sm-3 pb-sm-3 order-sm-2 mt-10 mt-sm-0\"\n      >\n        <v-btn-toggle\n          v-model=\"toggleType\"\n          mandatory\n          active-class=\"textDark white--text alig-end\"\n        >\n          <v-btn small>Main</v-btn>\n          <v-btn small>Test</v-btn>\n          <v-btn small>All</v-btn>\n        </v-btn-toggle>\n      </div>\n\n      <!-- ===================================================================================== -->\n      <!-- Search Data -->\n      <!-- ===================================================================================== -->\n      <v-col cols=\"12\" sm=\"7\" class=\"order-sm-1\">\n        <mew-search\n          placeholder=\"Find Network\"\n          :value=\"searchInput\"\n          @input=\"setSearch\"\n        />\n      </v-col>\n    </v-row>\n\n    <!-- ===================================================================================== -->\n    <!-- Empty Search Message -->\n    <!-- ===================================================================================== -->\n    <app-user-msg-block\n      v-if=\"showEmptySearch || isSwapPage\"\n      :message=\"emptySearchMes\"\n      :is-alert=\"isSwapPage\"\n      class=\"mt-5\"\n    />\n\n    <!-- ===================================================================================== -->\n    <!-- Networks -->\n    <!-- ===================================================================================== -->\n    <v-radio-group v-model=\"networkSelected\">\n      <v-container\n        v-for=\"(network, i) in networks\"\n        :key=\"network.name\"\n        :class=\"[\n          { 'network-border-first': i === 0 },\n          { 'network-border-last': i + 1 === networks.length },\n          'py-4 px-5 network-border'\n        ]\"\n      >\n        <v-row class=\"pa-0 mew-body align-center justify-start\">\n          <!-- ===================================================================================== -->\n          <!-- Icon -->\n          <!-- ===================================================================================== -->\n          <mew-token-container :img=\"network.icon\" size=\"24px\" />\n          <!-- ===================================================================================== -->\n          <!-- Symbol/Name -->\n          <!-- ===================================================================================== -->\n          <div class=\"textDark--text Capitalize pl-3\">\n            {{ network.name }}\n          </div>\n          <div class=\"px-2 textLight--text\">-</div>\n          <div class=\"textLight--text\">\n            {{ network.name_long }}\n          </div>\n          <v-spacer />\n\n          <!-- ===================================================================================== -->\n          <!-- Radio -->\n          <!-- ===================================================================================== -->\n          <v-radio\n            :value=\"network.name\"\n            :class=\"['py-2 mb-0']\"\n            :disabled=\"networkLoading\"\n          >\n          </v-radio>\n        </v-row>\n      </v-container>\n    </v-radio-group>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters, mapState } from 'vuex';\nimport { debounce } from 'lodash';\n\nimport * as nodes from '@/utils/networks/nodes';\nimport * as types from '@/utils/networks/types';\nimport { Toast, SUCCESS, ERROR } from '@/modules/toast/handler/handlerToast';\n\nimport handlerAnalytics from '@/modules/analytics-opt-in/handlers/handlerAnalytics.mixin';\nimport matchNetwork from '@/core/helpers/matchNetwork';\nimport WALLET_TYPES from '@/modules/access-wallet/common/walletTypes';\n\nexport default {\n  name: 'NetworkSwitch',\n  components: {\n    AppUserMsgBlock: () => import('@/core/components/AppUserMsgBlock')\n  },\n  mixins: [handlerAnalytics],\n  props: {\n    isWallet: { type: Boolean, default: true },\n    /** Set this prop to pass specific networks to be displayed */\n    filterTypes: { type: Array, default: () => [] },\n    /** Set this prop to false if device does not support networks */\n    hasNetworks: { type: Boolean, default: true },\n    isSwapPage: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      networkSelectedBefore: null,\n      networkSelected: null,\n      nodes: nodes,\n      toggleType: 0,\n      searchInput: '',\n      networkLoading: false\n    };\n  },\n  computed: {\n    ...mapGetters('global', ['network']),\n    ...mapState('global', ['validNetwork']),\n    ...mapState('wallet', ['identifier', 'instance', 'isOfflineApp']),\n    /**\n     * Property returns sorted network names alphabetically in this order: ETH, main and then test networks\n     * @returns {string[]}\n     */\n    typeNames() {\n      if (this.hasNetworks) {\n        const unsorted =\n          this.filterTypes.length > 0\n            ? [...this.filterTypes]\n            : Object.keys(types);\n        unsorted.splice(unsorted.indexOf('ETH'), 1);\n        unsorted.sort();\n        const test = unsorted.filter(item => {\n          return types[item].isTestNetwork;\n        });\n        const main = unsorted.filter(item => {\n          return !types[item].isTestNetwork;\n        });\n        const sorted = main.concat(test);\n        sorted.unshift('ETH');\n        return sorted;\n      }\n      return [];\n    },\n    /**\n     * Property returns filter networks list based on search input and toggle  type\n     * @returns {object[]}\n     */\n    networks() {\n      let allNetworks = [];\n      this.typeNames.forEach(item => {\n        allNetworks.push(types[item]);\n      });\n      if (this.isSwapPage) {\n        allNetworks = allNetworks.filter(\n          item =>\n            item.name === types.ETH.name ||\n            item.name === types.BSC.name ||\n            item.name === types.MATIC.name\n        );\n      }\n      if (this.searchInput && this.searchInput !== '') {\n        return allNetworks.filter(item =>\n          this.hasString(item.name, item.name_long)\n        );\n      }\n      if (this.toggleType === 0) {\n        return allNetworks.filter(item => !item.isTestNetwork);\n      }\n      if (this.toggleType === 1) {\n        return allNetworks.filter(item => item.isTestNetwork);\n      }\n      return allNetworks;\n    },\n    /**\n     * Property shows invalid search if user included input and networks length is 0\n     * @returns {boolean}\n     */\n    showEmptySearch() {\n      return (\n        this.searchInput &&\n        this.searchInput !== '' &&\n        this.networks.length === 0\n      );\n    },\n    /**\n     * Property shows search input string\n     * @returns {object}\n     */\n    emptySearchMes() {\n      if (this.isSwapPage && this.typeNames.length === 0) {\n        return {\n          title: 'Swap is not supported on your device',\n          subtitle: ''\n        };\n      }\n      if (this.typeNames.length === 0) {\n        return {\n          title: 'Changing a network is not supported on your device',\n          subtitle: ''\n        };\n      }\n      return {\n        title: this.isSwapPage\n          ? 'Swap is only available on these networks'\n          : '',\n        subtitle: this.isSwapPage\n          ? 'Select different feature to see all networks.'\n          : 'We do not have a network with this name.'\n      };\n    }\n  },\n  watch: {\n    networkSelected(value) {\n      if (value && (value !== this.network.type.name || !this.validNetwork)) {\n        this.networkLoading = true;\n        this.setNetworkDebounced(value);\n      }\n    },\n    searchInput(newVal, oldVal) {\n      /**\n       * Set current network to prevent undefined networkSelected value\n       */\n      if (this.networks.length > 0) {\n        this.networkSelected = this.networkSelectedBefore;\n      }\n\n      if (newVal != oldVal && (!oldVal || oldVal === '')) {\n        this.toggleType = 2;\n      }\n    },\n    validNetwork(val) {\n      if (!val) this.networkSelected = null;\n      else this.networkSelected = this.network.type.name;\n    },\n    async network() {\n      this.networkLoading = true;\n      const matched = await matchNetwork(\n        this.network.type.chainID,\n        this.identifier\n      );\n      if (matched) this.networkSelected = this.network.type.name;\n      this.networkLoading = false;\n    },\n    /**\n     * Set networkSelected on toggle change, if network is in the list\n     */\n    toggleType() {\n      if (!this.networkSelected) {\n        if (\n          this.networks.filter(item => item.name === this.network.type.name)\n            .length > 0\n        ) {\n          this.networkSelected = this.validNetwork\n            ? this.network.type.name\n            : '';\n        }\n      }\n    }\n  },\n  mounted() {\n    this.networkSelected = this.validNetwork ? this.network.type.name : '';\n    this.networkSelectedBefore = this.networkSelected;\n  },\n  methods: {\n    ...mapActions('wallet', ['setWeb3Instance']),\n    ...mapActions('global', ['setNetwork']),\n    /**\n     * Method checks whether symbol or name has searchInput substring\n     * @returns {boolean}\n     */\n    hasString(symbol, name) {\n      return (\n        symbol.toLowerCase().includes(this.searchInput.toLowerCase()) ||\n        name.toLowerCase().includes(this.searchInput.toLowerCase())\n      );\n    },\n    /**\n     * Method sets SearchInout on mew-search input event\n     * @returns {boolean}\n     */\n    setSearch(newVal) {\n      this.searchInput = newVal;\n    },\n    /**\n     * Debounce network switch from user input\n     * @return {void}\n     */\n    setNetworkDebounced: debounce(function (value) {\n      this.savePreviousNetwork();\n\n      const found = Object.values(this.nodes).filter(item => {\n        if (item.type.name === value) {\n          return item;\n        }\n      });\n      this.setNetwork({\n        network: found[0],\n        walletType: this.instance?.identifier || ''\n      })\n        .then(() => {\n          if (this.isWallet) {\n            this.networkSelected = this.validNetwork\n              ? this.network.type.name\n              : '';\n            this.networkLoading = false;\n            const setNetworkCall =\n              this.identifier === WALLET_TYPES.WEB3_WALLET\n                ? this.setWeb3Instance(window.ethereum)\n                : this.setWeb3Instance();\n            setNetworkCall.then(() => {\n              Toast(`Switched network to: ${found[0].type.name}`, {}, SUCCESS);\n              this.trackNetworkSwitch(found[0].type.name);\n              this.$emit('newNetwork');\n            });\n          }\n        })\n        .catch(e => {\n          this.networkSelected = this.validNetwork\n            ? this.network.type.name\n            : '';\n          this.networkLoading = false;\n          Toast(e, {}, ERROR);\n        });\n    }, 1000),\n    /**\n     * Backup current network value\n     */\n    savePreviousNetwork() {\n      if (this.networkSelected) {\n        this.networkSelectedBefore = this.networkSelected;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n$borderNetwork: 1px solid #ececec;\n.network-border {\n  border-bottom: $borderNetwork;\n  border-right: $borderNetwork;\n  border-left: $borderNetwork;\n}\n\n.network-border-first {\n  border-top: $borderNetwork;\n  border-radius: 4px 4px 0px 0px;\n}\n\n.network-border-last {\n  border-radius: 0px 0px 4px 4px;\n}\n\n.mint-me-color {\n  filter: brightness(0) saturate(100%) invert(90%) sepia(3%) saturate(5171%)\n    hue-rotate(348deg) brightness(92%) contrast(63%);\n}\n</style>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkSwitch.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkSwitch.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NetworkSwitch.vue?vue&type=template&id=5b20c22e&scoped=true&\"\nimport script from \"./NetworkSwitch.vue?vue&type=script&lang=js&\"\nexport * from \"./NetworkSwitch.vue?vue&type=script&lang=js&\"\nimport style0 from \"./NetworkSwitch.vue?vue&type=style&index=0&id=5b20c22e&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5b20c22e\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NetworkSwitch.vue?vue&type=style&index=0&id=5b20c22e&prod&lang=scss&scoped=true&\""],"sourceRoot":""}